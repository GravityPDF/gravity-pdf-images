<?php

namespace GFPDF\Tests\EnhancedImages;

use GFPDF\Plugins\Images\ImageManipulation\Resize;
use GFPDF\Plugins\Images\Shared\ImageInfo;
use Vfs\FileSystem;

use WP_UnitTestCase;

/**
 * @package     Gravity PDF Images
 * @copyright   Copyright (c) 2017, Blue Liquid Designs
 * @license     http://opensource.org/licenses/gpl-2.0.php GNU Public License
 * @since       1.0
 */

/* Exit if accessed directly */
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/*
    This file is part of Gravity PDF Images.

    Copyright (C) 2017, Blue Liquid Designs

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/**
 * Class TestResize
 *
 * @package GFPDF\Tests\EnhancedImages
 *
 * @group   images
 */
class TestResize extends WP_UnitTestCase {

	/**
	 * @var Resize
	 * @since 1.0
	 */
	private $class;

	/**
	 * @var array
	 * @since 1.0
	 */
	private $form;

	/**
	 * @var array
	 * @since 1.0
	 */
	private $entry;

	/**
	 * @var FileSystem
	 * @since 1.0
	 */
	private $fs;

	/**
	 * @var string Base64 encoded 1500x1500 image for testing
	 * @since 1.0
	 */
	private $image = 'iVBORw0KGgoAAAANSUhEUgAABdwAAAXcCAMAAAAP67xWAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyZpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTM4IDc5LjE1OTgyNCwgMjAxNi8wOS8xNC0wMTowOTowMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTcgKFdpbmRvd3MpIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjQzNUZDQkIzMkZBMTExRTc4QjkxRjRCOTJFMEFCMDE5IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjQzNUZDQkI0MkZBMTExRTc4QjkxRjRCOTJFMEFCMDE5Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NDM1RkNCQjEyRkExMTFFNzhCOTFGNEI5MkUwQUIwMTkiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NDM1RkNCQjIyRkExMTFFNzhCOTFGNEI5MkUwQUIwMTkiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6qy49nAAAABlBMVEX///8AAABVwtN+AAAIn0lEQVR42uzBAQ0AAADCoPdPbQ43obBBgAXOoAAZ4uoDIAAAAASUVORK5CYII=';

	/**
	 * @since 1.0
	 */
	public function setUp() {

		/* Create and mount a virtual filesystem */
		$this->fs = FileSystem::factory( 'vfs://' );
		$this->fs->mount();

		file_put_contents( 'vfs://test-image.jpg', base64_decode( $this->image ) );
		file_put_contents( 'vfs://test-file.doc', '' );

		$this->class = new Resize( new ImageInfo() );
		$this->class->init();

		$upload                = new \GF_Field_FileUpload();
		$upload->id            = 1;
		$upload->multipleFiles = true;

		$this->form  = [ 'id' => 0, 'fields' => [ $upload ] ];
		$this->entry = [
			'form_id' => 0,
			'id'      => 0,
			'1'       => '["vfs://test-image.jpg", "vfs://test-file.doc"]',
		];
	}

	/**
	 * @since 1.0
	 */
	public function tearDown() {
		$this->fs->unmount();
	}

	/**
	 * @since 1.0
	 */
	public function test_add_actions() {
		$this->assertEquals( 10, has_action( 'gform_entry_post_save', [ $this->class, 'maybe_resize_images' ] ) );
		$this->assertEquals( 10, has_action( 'gform_after_update_entry', [
			$this->class,
			'maybe_resize_images_after_update',
		] ) );
	}

	/**
	 * @since 1.0
	 */
	public function test_maybe_resize_images() {
		$this->class->maybe_resize_images( $this->entry, $this->form );
		$this->assertFileExists( 'vfs://test-image-pdf-resized.jpg' );
		$this->assertFileNotExists( 'vfs://test-file-pdf-resized.doc' );

		list( $width, $height ) = getimagesize( 'vfs://test-image-pdf-resized.jpg' );

		$this->assertEquals( '1000', $width );
		$this->assertEquals( '1000', $height );
	}
}